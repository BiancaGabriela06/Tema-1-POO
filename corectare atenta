#include <iostream>
#include <cstring>
#include <vector>
#define N 10000

using namespace std;


class Accesoriu /// clasa de baza
{
protected:
    string nume, culoare;
    double pret;
    int id;

public:
    virtual void citire()
    {
        cout << "Accesoriul: ";
        cin >> nume >> culoare >> pret >> id;
    }

    virtual void afisare()
    {
        cout << nume <<" "<< culoare<<" " << pret <<" "<< id<<" ";
    }

    /// CONSTRUCTORS AND DISTRUCTOR
    Accesoriu(string Nume="anonim", string Culoare="neutru", double Pret=0.0, int Id=0) //constructor de initializare parametrizat
    {
        nume = Nume;
        culoare = Culoare;
        pret = Pret;
        id = Id;
    }

    Accesoriu() // Constructor gol
    {
        nume = "";
        culoare = "";
        pret = 0.0;
        id = 0;
    }

    Accesoriu(const Accesoriu& ob) // constructor de copiere
    {
        nume = ob.nume;
        culoare = ob.culoare;
        pret = ob.pret;
        id = ob.id;
    }

    virtual ~Accesoriu() // destructor
    {
        /*nume="", culoare="", pret=0.0, id = 0;*/
        cout << "accesoriu distrus"<<"\n";
    }



    friend ostream& operator<<(ostream& out, Accesoriu& ob); //afisare
    friend istream& operator>>(istream& in, Accesoriu& ob); //citire
    virtual Accesoriu& operator=(Accesoriu&); /// va fi declarata si in alte clase


};



class Palarie :  public Accesoriu
{
protected:
    char size; // care poate fi  S M L

public:
    ///Palarie(): Accesoriu() {size = 'X';}
    Palarie(string Nume="anonim", string Culoare="neutru", double Pret=0.0, int Id=0, char Size='X') : Accesoriu(Nume, Culoare, Pret, Id) { size = Size;}
    Palarie(Palarie &ob) : Accesoriu(ob) {size = ob.size;} /// Constructor de copiere
    ~Palarie() {cout << "palarie distrusa"<<"\n";}
    void citire() { Accesoriu::citire(); cin >> size;}
    void afisare() { Accesoriu::afisare(); cout << size;}
    Palarie& operator=(Palarie&);
    friend ostream& operator<<(ostream& out, Palarie& ob);
    friend istream& operator>>(istream& in, Palarie& ob);


};



class Ochelari : public Accesoriu
{
protected:
    string forma; /// hexagon, cerc, dreptunghi

public:
    ///Ochelari() : Accesoriu() { forma = "neutru";}
    Ochelari(string Nume="anonim", string Culoare="neutru", double Pret=0.0, int Id=0, string Forma="neutru") : Accesoriu(Nume, Culoare, Pret, Id) { forma = Forma;}
    Ochelari(string Forma) { forma = Forma;}
    Ochelari(Ochelari &ob) : Accesoriu(ob) { forma = ob.forma;}  ///Constructor de copiere
    ~Ochelari() {cout <<"ochelari distrusi"<<"\n";}

    void citire() {Accesoriu::citire(); cin >> forma;}
    void afisare() {Accesoriu::afisare(); cout << forma;}
    Ochelari& operator=(Ochelari&);
    friend ostream& operator<<(ostream& out, Ochelari& ob);
    friend istream& operator>>(istream& in, Ochelari& ob);


};




/*class Boutique
{
    Accesoriu *accesorii;
    int nr_accesorii;

public:
    ///CONSTRUCTORS AND DISTRUCTOR
    Boutique(Accesoriu *arr, int n) /// Constructor de initializare parametrizat
    {
        this -> accesorii = new Accesoriu[n];
        for(int i=0; i<n; i++)
            this -> accesorii[i] = arr[i];
        nr_accesorii = n;
    }
    ~Boutique()
    {
        nr_accesorii = 0;
        delete[] accesorii;
        cout << "boutique distrus" <<"\n";
    }

    Boutique() /// constructor de initializare (fara parametrii) cu null pe fiecare componenta
    {
        accesorii = new Accesoriu[100];

        for(int i = 0; i < 100; i++)
        {
            accesorii[i].set_Nume("");
            accesorii[i].set_Culoare("");
            accesorii[i].set_Pret(0);
            accesorii[i].set_Id(0);
        }

    }

    void Afisare()
    {
         for(int i=0; i<3; i++)
             cout << accesorii[i].get_Nume() <<" "<< accesorii[i].get_Culoare()<<" "<< accesorii[i].get_Pret()<<" "<< accesorii[i].get_Id()<<endl;
    }

    friend ostream& operator<<(ostream& out, Boutique& ob); //afisare
    friend istream& operator>>(istream& in, Boutique& ob); //citire
    Boutique operator=(Boutique);

};

ostream& operator<<(ostream& out, Boutique& ob)
{
    out << ob.nr_accesorii<<endl;
    for(int i=0; i<ob.nr_accesorii; i++)
        out << ob.accesorii[i]<<" ";
    return out;
}

istream& operator>>(istream& in, Boutique& ob)
{
    in >> ob.nr_accesorii;
    for(int i=0; i<ob.nr_accesorii; i++)
        in >> ob.accesorii[i];
    return in;
}

*/

int main()
{
    /*Accesoriu *arr = new Accesoriu[3];
    Boutique b(arr,3);
    b.Afisare();*/

    /*Accesoriu A("palarie","alb", 10, 101);
    Accesoriu D;
    D=A;
    cout << D;
    cout << A;*/

    Palarie ob("palarie","alb", 10, 101, 'S');
    ob.afisare();
    cout <<"\n";
    Palarie ob2 = ob;
    ob2.afisare();
    cout <<"\n";

    return 0;
}


///clasa Accesoriu
Accesoriu& Accesoriu::operator=(Accesoriu &ob)  {   if(this!=&ob)
    {
        this -> nume = ob.nume;
        this -> culoare = ob.culoare;
        this -> id = ob.id;
        this -> pret = ob.pret;
    }

    return *this;


}
ostream& operator<<(ostream& out, Accesoriu& ob)
{
    out << "Accesoriu: " <<endl;
    out << ob.nume <<" "<< ob.culoare <<" "<< ob.pret <<" "<<ob.id << endl;
    return out;
}
istream& operator>>(istream& in, Accesoriu& ob)
{
    in >> ob.nume >> ob.culoare >> ob.pret >> ob.id;
    return in;
}

// clasa Palarie

Palarie& Palarie::operator=( Palarie& ob)
{
    if(this != &ob)
    {
        this-> Accesoriu::operator=(ob);
        this ->size = ob.size;
    }
    return *this;
}
ostream& operator<<(ostream& out, Palarie& ob)
{
    out << dynamic_cast <Accesoriu&> (ob);
    out << "Palaria are marimea:" << ob.size;
    return out;
}
istream& operator>>(istream& in, Palarie& ob)
{
    in >> dynamic_cast <Accesoriu&> (ob);
    cout <<"Marimea palariei este: ";
    in >> ob.size;
    return in;
}

// clasa Ochelari
Ochelari& Ochelari::operator=(Ochelari& ob)
{
    if(this != &ob)
    {
        this -> Accesoriu::operator=(ob);
        this -> forma = ob.forma;
    }
    return *this;
}
ostream& operator<<(ostream& out, Ochelari& ob)
{
    out << dynamic_cast <Accesoriu&> (ob);
    out <<"Ochelarii au forma: " << ob.forma;
    return out;
}
istream& operator>>(istream& in, Ochelari& ob)
{
    in >> dynamic_cast <Accesoriu&> (ob);
    cout << "Ochelarii au forma: ";
    in >> ob.forma;
    return in;
}
